{"ast":null,"code":"var _jsxFileName = \"/Users/derekshue/Desktop/AA-classwork/Week_15/derek_shue_online-store/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport { HashRouter } from 'react-router-dom';\nimport { VERIFY_USER } from './graphql/mutations';\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\nconst token = localStorage.getItem(\"auth-token\");\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(localStorage.getItem(\"auth-token\"))\n  }\n});\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\"\n}); // make sure we log any additional errors we receive\n\nconst errorLink = onError(({\n  graphQLErrors\n}) => {\n  if (graphQLErrors) graphQLErrors.map(({\n    message\n  }) => console.log(message));\n});\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\nif (token) {\n  client // use the VERIFY_USER mutation directly use the returned data to know if the returned\n  // user is loggedIn\n  .mutate({\n    mutation: VERIFY_USER,\n    variables: {\n      token\n    }\n  }).then(({\n    data\n  }) => {\n    cache.writeData({\n      data: {\n        isLoggedIn: data.verifyUser.loggedIn\n      }\n    });\n  });\n}\n\nconst Root = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(HashRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69\n  },\n  __self: this\n}), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/derekshue/Desktop/AA-classwork/Week_15/derek_shue_online-store/client/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","onError","ApolloLink","HashRouter","VERIFY_USER","cache","dataIdFromObject","object","_id","token","localStorage","getItem","writeData","data","isLoggedIn","Boolean","httpLink","uri","errorLink","graphQLErrors","map","message","console","log","client","link","networkError","mutate","mutation","variables","then","verifyUser","loggedIn","Root","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,MAAMC,KAAK,GAAG,IAAIP,aAAJ,CAAkB;AAC5BQ,EAAAA,gBAAgB,EAAEC,MAAM,IAAIA,MAAM,CAACC,GAAP,IAAc;AADd,CAAlB,CAAd;AAIA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AAEAN,KAAK,CAACO,SAAN,CAAgB;AACZC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEC,OAAO,CAACL,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD;AADf;AADM,CAAhB;AAMA,MAAMK,QAAQ,GAAGjB,cAAc,CAAC;AAC5BkB,EAAAA,GAAG,EAAE;AADuB,CAAD,CAA/B,C,CAIA;;AACA,MAAMC,SAAS,GAAGjB,OAAO,CAAC,CAAC;AAAEkB,EAAAA;AAAF,CAAD,KAAuB;AACjD,MAAIA,aAAJ,EAAmBA,aAAa,CAACC,GAAd,CAAkB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiBC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAnC;AAClB,CAFwB,CAAzB;AAIA,MAAMG,MAAM,GAAG,IAAI3B,YAAJ,CAAiB;AAC5B4B,EAAAA,IAAI,EAAET,QADsB;AAE5BX,EAAAA,KAF4B;AAG5BJ,EAAAA,OAAO,EAAE,CAAC;AAAEyB,IAAAA,YAAF;AAAgBP,IAAAA;AAAhB,GAAD,KAAqC;AAC5CG,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,aAA7B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BG,YAA5B;AACD;AAN2B,CAAjB,CAAf;;AASA,IAAIjB,KAAJ,EAAW;AACPe,EAAAA,MAAM,CACJ;AACA;AAFI,GAGHG,MAHH,CAGU;AAAEC,IAAAA,QAAQ,EAAExB,WAAZ;AAAyByB,IAAAA,SAAS,EAAE;AAAEpB,MAAAA;AAAF;AAApC,GAHV,EAIGqB,IAJH,CAIQ,CAAC;AAAEjB,IAAAA;AAAF,GAAD,KAAc;AAClBR,IAAAA,KAAK,CAACO,SAAN,CAAgB;AACdC,MAAAA,IAAI,EAAE;AACJC,QAAAA,UAAU,EAAED,IAAI,CAACkB,UAAL,CAAgBC;AADxB;AADQ,KAAhB;AAKD,GAVH;AAWH;;AAED,MAAMC,IAAI,GAAG,MAAM;AACf,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAET,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADJ,CADF;AAOH,CARD;;AAUA9B,QAAQ,CAACwC,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B,E,CAEA;AACA;AACA;;AACAxC,aAAa,CAACyC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport { HashRouter } from 'react-router-dom';\nimport { VERIFY_USER } from './graphql/mutations';\n\nconst cache = new InMemoryCache({\n    dataIdFromObject: object => object._id || null\n});\n\nconst token = localStorage.getItem(\"auth-token\");\n\ncache.writeData({\n    data: {\n      isLoggedIn: Boolean(localStorage.getItem(\"auth-token\"))\n    }\n});\n\nconst httpLink = createHttpLink({\n    uri: \"http://localhost:5000/graphql\"\n});\n\n// make sure we log any additional errors we receive\nconst errorLink = onError(({ graphQLErrors }) => {\nif (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n});\n\nconst client = new ApolloClient({\n    link: httpLink,\n    cache,\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    }\n});\n\nif (token) {\n    client\n      // use the VERIFY_USER mutation directly use the returned data to know if the returned\n      // user is loggedIn\n      .mutate({ mutation: VERIFY_USER, variables: { token } })\n      .then(({ data }) => {\n        cache.writeData({\n          data: {\n            isLoggedIn: data.verifyUser.loggedIn\n          }\n        });\n      });\n}\n\nconst Root = () => {\n    return (\n      <ApolloProvider client={client}>\n          <HashRouter>\n            <App />\n          </HashRouter>\n      </ApolloProvider>\n    );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}