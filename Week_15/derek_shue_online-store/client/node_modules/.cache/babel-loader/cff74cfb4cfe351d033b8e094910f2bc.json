{"ast":null,"code":"var _jsxFileName = \"/Users/derekshue/Desktop/AA-classwork/Week_15/derek_shue_online-store/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\"\n}); // make sure we log any additional errors we receive\n\nconst errorLink = onError(({\n  graphQLErrors\n}) => {\n  if (graphQLErrors) graphQLErrors.map(({\n    message\n  }) => console.log(message));\n});\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\nconst Root = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/derekshue/Desktop/AA-classwork/Week_15/derek_shue_online-store/client/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","onError","ApolloLink","cache","dataIdFromObject","object","_id","httpLink","uri","errorLink","graphQLErrors","map","message","console","log","client","link","networkError","Root","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,MAAMC,KAAK,GAAG,IAAIL,aAAJ,CAAkB;AAC5BM,EAAAA,gBAAgB,EAAEC,MAAM,IAAIA,MAAM,CAACC,GAAP,IAAc;AADd,CAAlB,CAAd;AAIA,MAAMC,QAAQ,GAAGR,cAAc,CAAC;AAC5BS,EAAAA,GAAG,EAAE;AADuB,CAAD,CAA/B,C,CAIA;;AACA,MAAMC,SAAS,GAAGR,OAAO,CAAC,CAAC;AAAES,EAAAA;AAAF,CAAD,KAAuB;AACjD,MAAIA,aAAJ,EAAmBA,aAAa,CAACC,GAAd,CAAkB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiBC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAnC;AAClB,CAFwB,CAAzB;AAIA,MAAMG,MAAM,GAAG,IAAIlB,YAAJ,CAAiB;AAC5BmB,EAAAA,IAAI,EAAET,QADsB;AAE5BJ,EAAAA,KAF4B;AAG5BF,EAAAA,OAAO,EAAE,CAAC;AAAEgB,IAAAA,YAAF;AAAgBP,IAAAA;AAAhB,GAAD,KAAqC;AAC5CG,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,aAA7B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BG,YAA5B;AACD;AAN2B,CAAjB,CAAf;;AASA,MAAMC,IAAI,GAAG,MAAM;AACf,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKH,CAND;;AAQArB,QAAQ,CAACyB,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\n\nconst cache = new InMemoryCache({\n    dataIdFromObject: object => object._id || null\n});\n\nconst httpLink = createHttpLink({\n    uri: \"http://localhost:5000/graphql\"\n});\n\n// make sure we log any additional errors we receive\nconst errorLink = onError(({ graphQLErrors }) => {\nif (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n});\n\nconst client = new ApolloClient({\n    link: httpLink,\n    cache,\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    }\n});\n\nconst Root = () => {\n    return (\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}